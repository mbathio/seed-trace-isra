// backend/diagnose.js - Script de diagnostic
const fs = require("fs");
const path = require("path");
const net = require("net");
const { exec } = require("child_process");

console.log("üîç Diagnostic du syst√®me ISRA Seed Trace\n");

// 1. V√©rifier le fichier .env
function checkEnvFile() {
  console.log("üìã V√©rification du fichier .env...");
  const envPath = path.join(__dirname, ".env");

  if (fs.existsSync(envPath)) {
    console.log("‚úÖ Fichier .env trouv√©");

    const envContent = fs.readFileSync(envPath, "utf8");
    const requiredVars = [
      "NODE_ENV",
      "PORT",
      "DATABASE_URL",
      "JWT_SECRET",
      "CLIENT_URL",
    ];

    const missingVars = [];
    requiredVars.forEach((varName) => {
      if (!envContent.includes(varName)) {
        missingVars.push(varName);
      }
    });

    if (missingVars.length > 0) {
      console.log("‚ùå Variables manquantes:", missingVars.join(", "));
      return false;
    } else {
      console.log("‚úÖ Toutes les variables requises sont pr√©sentes");
      return true;
    }
  } else {
    console.log("‚ùå Fichier .env non trouv√©!");
    console.log("üí° Cr√©ez un fichier .env √† partir de .env.example");
    return false;
  }
}

// 2. V√©rifier si le port est disponible
function checkPort(port) {
  return new Promise((resolve) => {
    console.log(`\nüîå Test du port ${port}...`);

    const server = net.createServer();

    server.once("error", (err) => {
      if (err.code === "EADDRINUSE") {
        console.log(`‚ùå Le port ${port} est d√©j√† utilis√©`);

        // Trouver le processus qui utilise le port
        if (process.platform === "win32") {
          exec(`netstat -ano | findstr :${port}`, (error, stdout) => {
            if (!error && stdout) {
              console.log("üí° Processus utilisant le port:");
              console.log(stdout);
              console.log("\nPour tuer le processus: taskkill /F /PID [PID]");
            }
          });
        }
        resolve(false);
      } else {
        console.log("‚ùå Erreur lors du test du port:", err.message);
        resolve(false);
      }
    });

    server.once("listening", () => {
      server.close();
      console.log(`‚úÖ Port ${port} disponible`);
      resolve(true);
    });

    server.listen(port, "localhost");
  });
}

// 3. V√©rifier PostgreSQL
function checkPostgres() {
  console.log("\nüêò Test de connexion PostgreSQL...");

  // Essayer de se connecter avec pg
  exec("pg_isready -h localhost -p 5432", (error, stdout, stderr) => {
    if (error) {
      console.log("‚ùå PostgreSQL ne semble pas accessible");
      console.log("üí° D√©marrez PostgreSQL:");
      console.log("   - Windows: Services > PostgreSQL > D√©marrer");
      console.log(
        '   - Ou: pg_ctl start -D "C:\\Program Files\\PostgreSQL\\[version]\\data"'
      );
    } else {
      console.log("‚úÖ PostgreSQL est accessible");
      console.log(stdout);
    }
  });
}

// 4. V√©rifier les d√©pendances
function checkDependencies() {
  console.log("\nüì¶ V√©rification des d√©pendances...");

  const packageJsonPath = path.join(__dirname, "package.json");
  const nodeModulesPath = path.join(__dirname, "node_modules");

  if (!fs.existsSync(packageJsonPath)) {
    console.log("‚ùå package.json non trouv√©!");
    return false;
  }

  if (!fs.existsSync(nodeModulesPath)) {
    console.log("‚ùå node_modules non trouv√©!");
    console.log("üí° Ex√©cutez: npm install");
    return false;
  }

  // V√©rifier quelques modules critiques
  const criticalModules = [
    "@prisma/client",
    "express",
    "dotenv",
    "socket.io",
    "winston",
  ];

  const missingModules = [];
  criticalModules.forEach((module) => {
    const modulePath = path.join(nodeModulesPath, module);
    if (!fs.existsSync(modulePath)) {
      missingModules.push(module);
    }
  });

  if (missingModules.length > 0) {
    console.log("‚ùå Modules manquants:", missingModules.join(", "));
    console.log("üí° Ex√©cutez: npm install");
    return false;
  } else {
    console.log("‚úÖ Tous les modules critiques sont install√©s");
    return true;
  }
}

// 5. V√©rifier Prisma
function checkPrisma() {
  console.log("\nüî∑ V√©rification de Prisma...");

  const prismaPath = path.join(__dirname, "prisma", "schema.prisma");
  if (!fs.existsSync(prismaPath)) {
    console.log("‚ùå schema.prisma non trouv√©!");
    return false;
  }

  console.log("‚úÖ schema.prisma trouv√©");

  // V√©rifier si les migrations ont √©t√© appliqu√©es
  exec("npx prisma migrate status", (error, stdout, stderr) => {
    if (error) {
      console.log("‚ö†Ô∏è  Les migrations Prisma ne semblent pas appliqu√©es");
      console.log("üí° Ex√©cutez: npx prisma db push");
    } else {
      console.log("‚úÖ √âtat des migrations:");
      console.log(stdout);
    }
  });

  return true;
}

// 6. Test de d√©marrage rapide
async function quickStartTest() {
  console.log("\nüöÄ Test de d√©marrage rapide...");

  try {
    // Charger dotenv
    require("dotenv").config();

    console.log("‚úÖ Variables d'environnement charg√©es");
    console.log(`   PORT: ${process.env.PORT || "3001"}`);
    console.log(`   NODE_ENV: ${process.env.NODE_ENV || "development"}`);
    console.log(`   DB_NAME: ${process.env.DB_NAME || "isra_seeds"}`);

    // Test de connexion DB simple
    const { Client } = require("pg");
    const connectionString = process.env.DATABASE_URL;

    if (!connectionString) {
      console.log("‚ùå DATABASE_URL non d√©finie!");
      return;
    }

    const client = new Client({ connectionString });

    console.log("üîó Tentative de connexion √† la base de donn√©es...");
    await client.connect();
    console.log("‚úÖ Connexion √† la base de donn√©es r√©ussie!");

    const result = await client.query("SELECT NOW()");
    console.log("‚úÖ Requ√™te test r√©ussie:", result.rows[0].now);

    await client.end();
  } catch (error) {
    console.log("‚ùå Erreur lors du test:", error.message);
  }
}

// Ex√©cuter tous les tests
async function runDiagnostics() {
  console.log("D√©marrage du diagnostic...\n");

  const envOk = checkEnvFile();
  if (!envOk) {
    console.log("\n‚ö†Ô∏è  Corrigez d'abord le fichier .env");
  }

  const port = process.env.PORT || 3001;
  await checkPort(port);

  checkPostgres();

  const depsOk = checkDependencies();
  if (!depsOk) {
    console.log("\n‚ö†Ô∏è  Installez d'abord les d√©pendances");
  }

  checkPrisma();

  if (envOk && depsOk) {
    await quickStartTest();
  }

  console.log("\nüìä R√©sum√© du diagnostic:");
  console.log("1. Si PostgreSQL n'est pas d√©marr√©, d√©marrez-le");
  console.log("2. Si le port est occup√©, changez PORT dans .env");
  console.log("3. Si des d√©pendances manquent: npm install");
  console.log("4. Si Prisma n'est pas synchronis√©: npx prisma db push");
  console.log("5. Red√©marrez avec: npm run dev");
}

// Lancer le diagnostic
runDiagnostics();
