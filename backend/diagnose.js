// diagnose.js - Script de diagnostic am√©lior√©
const fs = require("fs");
const path = require("path");

console.log("üîç DIAGNOSTIC DU SYST√àME ISRA SEED TRACE");
console.log("==========================================\n");

// 1. Versions
console.log("1Ô∏è‚É£ VERSION NODE.JS:");
console.log(`   Node: ${process.version}`);
console.log(`   NPM: ${process.env.npm_version || "N/A"}\n`);

// 2. V√©rifier les fichiers essentiels
console.log("2Ô∏è‚É£ FICHIERS ESSENTIELS:");
const requiredFiles = [
  ".env",
  "package.json",
  "tsconfig.json",
  "src/server.ts",
  "src/app.ts",
  "prisma/schema.prisma",
];

requiredFiles.forEach((file) => {
  const exists = fs.existsSync(path.join(__dirname, file));
  console.log(`   ${exists ? "‚úÖ" : "‚ùå"} ${file}`);
});

// 3. Variables d'environnement
console.log("\n3Ô∏è‚É£ VARIABLES D'ENVIRONNEMENT:");
require("dotenv").config();

const envVars = [
  "NODE_ENV",
  "PORT",
  "DATABASE_URL",
  "JWT_SECRET",
  "JWT_REFRESH_SECRET",
];
envVars.forEach((varName) => {
  const value = process.env[varName];
  if (value) {
    if (varName.includes("SECRET") || varName.includes("PASSWORD")) {
      console.log(`   ‚úÖ ${varName}: ****** (d√©fini)`);
    } else {
      console.log(`   ‚úÖ ${varName}: ${value}`);
    }
  } else {
    console.log(`   ‚ùå ${varName}: NON D√âFINI`);
  }
});

// 4. Test de la base de donn√©es avec Prisma
console.log("\n4Ô∏è‚É£ TEST CONNEXION POSTGRESQL:");
async function testDatabase() {
  try {
    const { PrismaClient } = require("@prisma/client");
    const prisma = new PrismaClient();

    // Test de connexion
    await prisma.$connect();
    console.log("   ‚úÖ Connexion √† PostgreSQL r√©ussie");

    // Compter les utilisateurs
    const userCount = await prisma.user.count();
    console.log(`   ‚úÖ Nombre d'utilisateurs: ${userCount}`);

    // Compter les vari√©t√©s
    const varietyCount = await prisma.variety.count();
    console.log(`   ‚úÖ Nombre de vari√©t√©s: ${varietyCount}`);

    // Compter les lots
    const seedLotCount = await prisma.seedLot.count();
    console.log(`   ‚úÖ Nombre de lots: ${seedLotCount}`);

    await prisma.$disconnect();
  } catch (error) {
    console.log(`   ‚ùå Erreur de connexion: ${error.message}`);
  }
}

// 5. D√©pendances
console.log("\n5Ô∏è‚É£ D√âPENDANCES INSTALL√âES:");
try {
  const packageJson = require("./package.json");
  const deps = Object.keys(packageJson.dependencies || {});
  console.log(`   ‚úÖ ${deps.length} d√©pendances install√©es`);

  // V√©rifier les d√©pendances critiques
  const criticalDeps = [
    "express",
    "@prisma/client",
    "jsonwebtoken",
    "bcryptjs",
    "cors",
  ];
  criticalDeps.forEach((dep) => {
    if (deps.includes(dep)) {
      console.log(`   ‚úÖ ${dep}`);
    } else {
      console.log(`   ‚ùå ${dep} MANQUANT`);
    }
  });
} catch (error) {
  console.log("   ‚ùå Erreur lors de la lecture de package.json");
}

// 6. Structure des dossiers
console.log("\n6Ô∏è‚É£ STRUCTURE DES DOSSIERS:");
const directories = ["src", "dist", "logs", "uploads", "prisma/migrations"];
directories.forEach((dir) => {
  const exists = fs.existsSync(path.join(__dirname, dir));
  console.log(`   ${exists ? "‚úÖ" : "‚ùå"} ${dir}`);
});

// Ex√©cuter les tests asynchrones
testDatabase()
  .then(() => {
    console.log("\n‚úÖ DIAGNOSTIC TERMIN√â");
  })
  .catch((error) => {
    console.error("\n‚ùå ERREUR LORS DU DIAGNOSTIC:", error);
  });
