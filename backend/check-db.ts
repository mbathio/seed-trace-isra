// backend/check-db.ts
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function checkDatabase() {
  console.log("üîç V√©rification de la base de donn√©es...\n");

  try {
    // V√©rifier la connexion
    await prisma.$connect();
    console.log("‚úÖ Connexion √† la base de donn√©es r√©ussie\n");

    // Compter les enregistrements dans chaque table
    const counts = {
      users: await prisma.user.count(),
      varieties: await prisma.variety.count(),
      seedLots: await prisma.seedLot.count(),
      multipliers: await prisma.multiplier.count(),
      parcels: await prisma.parcel.count(),
      productions: await prisma.production.count(),
      qualityControls: await prisma.qualityControl.count(),
      reports: await prisma.report.count(),
    };

    console.log("üìä Nombre d'enregistrements par table :");
    console.log("================================");
    Object.entries(counts).forEach(([table, count]) => {
      const status = count > 0 ? "‚úÖ" : "‚ùå";
      console.log(`${status} ${table}: ${count}`);
    });

    // V√©rifier les donn√©es sp√©cifiques
    console.log("\nüìã V√©rifications d√©taill√©es :");
    console.log("================================");

    // V√©rifier les lots actifs
    const activeLots = await prisma.seedLot.count({
      where: { isActive: true, status: "CERTIFIED" },
    });
    console.log(`‚úì Lots certifi√©s actifs: ${activeLots}`);

    // V√©rifier les productions en cours
    const inProgressProductions = await prisma.production.count({
      where: { status: "IN_PROGRESS" },
    });
    console.log(`‚úì Productions en cours: ${inProgressProductions}`);

    // V√©rifier les contr√¥les qualit√© r√©ussis
    const passedQC = await prisma.qualityControl.count({
      where: { result: "PASS" },
    });
    console.log(`‚úì Contr√¥les qualit√© r√©ussis: ${passedQC}`);

    // V√©rifier les vari√©t√©s actives
    const activeVarieties = await prisma.variety.count({
      where: { isActive: true },
    });
    console.log(`‚úì Vari√©t√©s actives: ${activeVarieties}`);

    // Afficher quelques utilisateurs
    console.log("\nüë• Utilisateurs dans la base :");
    console.log("================================");
    const users = await prisma.user.findMany({
      select: { email: true, name: true, role: true },
      take: 5,
    });
    users.forEach((user) => {
      console.log(`- ${user.email} (${user.name}) - R√¥le: ${user.role}`);
    });

    // V√©rifier s'il y a des erreurs r√©centes
    console.log("\n‚ö†Ô∏è  V√©rification des probl√®mes potentiels :");
    console.log("================================");

    // Lots sans vari√©t√©
    const lotsWithoutVariety = await prisma.seedLot.count({
      where: { varietyId: null },
    });
    if (lotsWithoutVariety > 0) {
      console.log(`‚ùå ${lotsWithoutVariety} lots sans vari√©t√©`);
    }

    // Productions sans lot
    const productionsWithoutLot = await prisma.production.count({
      where: { lotId: null },
    });
    if (productionsWithoutLot > 0) {
      console.log(`‚ùå ${productionsWithoutLot} productions sans lot`);
    }

    console.log("\n‚úÖ V√©rification termin√©e !");
  } catch (error) {
    console.error("‚ùå Erreur lors de la v√©rification :", error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter la v√©rification
checkDatabase();
