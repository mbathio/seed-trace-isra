// backend/src/server-no-socketio.ts - Serveur sans Socket.io pour √©viter les erreurs
import dotenv from "dotenv";
import http from "http";
import app from "./app";
import { connectDatabase, disconnectDatabase } from "./config/database";
import { logger } from "./utils/logger";
import {
  config,
  validateConfig,
  isDevelopment,
  isProduction,
} from "./config/environment";

// Charger les variables d'environnement EN PREMIER
dotenv.config();

// Validation de configuration non bloquante
console.log("üîß Validation de la configuration...");
const configValidation = validateConfig();

if (!configValidation.isValid && isProduction()) {
  console.error("‚ùå Configuration invalide en production");
  process.exit(1);
}

if (!configValidation.isValid && isDevelopment()) {
  console.warn(
    "‚ö†Ô∏è  Configuration avec avertissements en d√©veloppement - continuation"
  );
}

// Configuration du serveur
const PORT = config.server.port;
const HOST = config.server.host;

// Cr√©er le serveur HTTP
let server: http.Server;

try {
  server = http.createServer(app);
  logger.info("‚úÖ Serveur HTTP cr√©√© avec succ√®s");
} catch (error: any) {
  logger.error("‚ùå Erreur lors de la cr√©ation du serveur HTTP:", error);
  process.exit(1);
}

// Fonction pour d√©marrer le serveur
const startServer = async (): Promise<void> => {
  try {
    logger.info("üöÄ D√©marrage du serveur ISRA Seed Trace...");

    // Connexion √† la base de donn√©es
    logger.info("üîó Connexion √† la base de donn√©es...");
    try {
      await connectDatabase();
      logger.info("‚úÖ Connexion √† la base de donn√©es √©tablie");
    } catch (error: any) {
      logger.warn("‚ö†Ô∏è  Erreur de connexion DB:", error.message);
      if (isDevelopment()) {
        logger.warn("‚ö†Ô∏è  Continuation sans DB en mode d√©veloppement");
      } else {
        throw error;
      }
    }

    // D√©marrer le serveur
    logger.info(`üöÄ D√©marrage du serveur sur ${HOST}:${PORT}...`);

    server.listen(PORT, HOST, () => {
      logger.info("üéâ Serveur d√©marr√© avec succ√®s!");
      logger.info(`üìç URL: http://${HOST}:${PORT}`);
      logger.info(`üìù Environnement: ${config.environment}`);
      logger.info(`üîó CORS activ√© pour: ${config.client.url}`);
      logger.info(`üîê JWT configur√© avec expiration: ${config.jwt.expiresIn}`);

      if (isDevelopment()) {
        logger.info("üõ†Ô∏è  Mode d√©veloppement activ√©");
        logger.info(`üìö API disponible sur: http://${HOST}:${PORT}/api`);
        logger.info(`‚ù§Ô∏è  Health check: http://${HOST}:${PORT}/api/health`);
        logger.info(`üå± Seed lots: http://${HOST}:${PORT}/api/seed-lots`);
        logger.info(`üë§ Auth: http://${HOST}:${PORT}/api/auth/login`);
      }
    });

    // Gestion des erreurs du serveur
    server.on("error", (error: any) => {
      logger.error("‚ùå Erreur du serveur HTTP:", error);

      if (error.code === "EADDRINUSE") {
        logger.error(`‚ùå Le port ${PORT} est d√©j√† utilis√©`);
        logger.info("üí° Solutions possibles:");
        logger.info(`   ‚Ä¢ Changez le PORT dans .env (ex: PORT=3002)`);
        logger.info(`   ‚Ä¢ Arr√™tez le processus utilisant le port ${PORT}`);
      } else if (error.code === "EACCES") {
        logger.error(`‚ùå Permission refus√©e pour le port ${PORT}`);
        logger.info(
          "üí° Essayez un port > 1024 ou lancez en tant qu'administrateur"
        );
      }

      process.exit(1);
    });

    // Configuration des timeouts
    server.timeout = 30000; // 30 secondes
    server.keepAliveTimeout = 5000; // 5 secondes
    server.headersTimeout = 6000; // 6 secondes
  } catch (error: any) {
    logger.error("‚ùå Erreur fatale lors du d√©marrage du serveur:", {
      message: error.message,
      stack: isDevelopment() ? error.stack : undefined,
    });
    process.exit(1);
  }
};

// Gestion gracieuse de l'arr√™t
const gracefulShutdown = async (signal: string): Promise<void> => {
  logger.info(`${signal} re√ßu. Arr√™t gracieux du serveur...`);

  const forceShutdownTimeout = setTimeout(() => {
    logger.error("‚ùå Arr√™t forc√© apr√®s timeout de 15 secondes");
    process.exit(1);
  }, 15000);

  try {
    server.close(async () => {
      logger.info("‚úÖ Serveur HTTP ferm√©");

      try {
        await disconnectDatabase();
        logger.info("‚úÖ Connexions √† la base de donn√©es ferm√©es");
      } catch (error) {
        logger.warn("‚ö†Ô∏è  Erreur lors de la fermeture de la DB:", error);
      }

      clearTimeout(forceShutdownTimeout);
      logger.info("üèÅ Arr√™t complet du serveur");
      process.exit(0);
    });
  } catch (error) {
    logger.error("‚ùå Erreur lors de l'arr√™t gracieux:", error);
    clearTimeout(forceShutdownTimeout);
    process.exit(1);
  }
};

// Gestion des erreurs non captur√©es
process.on("unhandledRejection", (reason: any, promise: Promise<any>) => {
  logger.error("UNHANDLED PROMISE REJECTION! üí•", {
    reason: reason?.message || reason,
    stack: reason?.stack,
  });

  if (isDevelopment()) {
    logger.warn("‚ö†Ô∏è  Continuation en mode d√©veloppement malgr√© la rejection");
  } else {
    logger.error(
      "üö® Arr√™t du serveur √† cause d'une Promise rejection non g√©r√©e"
    );
    server.close(() => {
      process.exit(1);
    });
  }
});

process.on("uncaughtException", (err: Error) => {
  logger.error("UNCAUGHT EXCEPTION! üí•", {
    message: err.message,
    stack: err.stack,
    name: err.name,
  });

  logger.error(
    "üö® Arr√™t imm√©diat du serveur √† cause d'une exception non g√©r√©e"
  );
  process.exit(1);
});

// Gestion des signaux d'arr√™t
process.on("SIGTERM", () => gracefulShutdown("SIGTERM"));
process.on("SIGINT", () => gracefulShutdown("SIGINT"));

// Gestion sp√©cifique Windows
if (process.platform === "win32") {
  process.on("SIGBREAK", () => gracefulShutdown("SIGBREAK"));
}

// D√©marrer le serveur
console.log("üåæ ISRA Seed Trace - Syst√®me de tra√ßabilit√© des semences");
console.log("======================================================");

startServer().catch((error) => {
  console.error("üí• ERREUR FATALE lors du d√©marrage:", error.message);

  if (isDevelopment()) {
    console.error("üìã Stack trace compl√®te:");
    console.error(error.stack);
  }

  console.error("\nüí° V√©rifications recommand√©es:");
  console.error("   1. PostgreSQL est-il d√©marr√© ?");
  console.error("   2. Le fichier .env existe-t-il ?");
  console.error("   3. DATABASE_URL est-elle correcte ?");
  console.error("   4. Le port 3001 est-il libre ?");
  console.error("   5. Toutes les d√©pendances sont-elles install√©es ?");

  process.exit(1);
});

// Log de d√©marrage
logger.info("üìã Processus de d√©marrage initialis√©", {
  pid: process.pid,
  nodeVersion: process.version,
  platform: process.platform,
  arch: process.arch,
  env: config.environment,
  memory: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + "MB",
});
