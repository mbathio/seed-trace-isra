// backend/src/server.ts - Serveur CORRIG√â avec gestion d'erreurs robuste
import dotenv from "dotenv";
import http from "http";
import { Server as SocketIOServer } from "socket.io";
import app from "./app";
import { connectDatabase, disconnectDatabase } from "./config/database";
import { logger } from "./utils/logger";
import {
  config,
  validateConfig,
  isDevelopment,
  isProduction,
} from "./config/environment";

// ‚úÖ CORRECTION: Charger les variables d'environnement EN PREMIER
dotenv.config();

// ‚úÖ CORRECTION: Validation de configuration non bloquante
console.log("üîß Validation de la configuration...");
const configValidation = validateConfig();

if (!configValidation.isValid && isProduction()) {
  console.error("‚ùå Configuration invalide en production");
  process.exit(1);
}

if (!configValidation.isValid && isDevelopment()) {
  console.warn(
    "‚ö†Ô∏è  Configuration avec avertissements en d√©veloppement - continuation"
  );
}

// Configuration du serveur
const PORT = config.server.port;
const HOST = config.server.host;

// ‚úÖ CORRECTION: Cr√©er le serveur HTTP avec gestion d'erreur
let server: http.Server;

try {
  server = http.createServer(app);
  logger.info("‚úÖ Serveur HTTP cr√©√© avec succ√®s");
} catch (error: any) {
  logger.error("‚ùå Erreur lors de la cr√©ation du serveur HTTP:", error);
  process.exit(1);
}

// ‚úÖ CORRECTION: Configuration Socket.IO avec gestion d'erreur
let io: SocketIOServer;

try {
  io = new SocketIOServer(server, {
    cors: {
      origin: config.client.url,
      credentials: true,
      methods: ["GET", "POST"],
      allowedHeaders: ["Content-Type", "Authorization"],
    },
    transports: ["websocket", "polling"],
  });

  // Gestionnaire Socket.IO
  io.on("connection", (socket) => {
    logger.debug(`Nouveau client connect√©: ${socket.id}`);

    socket.on("disconnect", (reason) => {
      logger.debug(`Client d√©connect√©: ${socket.id}, raison: ${reason}`);
    });

    socket.on("error", (error) => {
      logger.error(`Erreur Socket.IO pour ${socket.id}:`, error);
    });
  });

  logger.info("‚úÖ Socket.IO configur√© avec succ√®s");
} catch (error: any) {
  logger.error("‚ùå Erreur lors de la configuration de Socket.IO:", error);
  // Continuer sans Socket.IO en cas d'erreur
}

// ‚úÖ CORRECTION: Fonction pour tester si le port est disponible
function testPortAvailability(port: number, host: string): Promise<boolean> {
  return new Promise((resolve) => {
    const net = require("net");
    const testServer = net.createServer();

    testServer.listen(port, host, () => {
      testServer.close(() => {
        resolve(true);
      });
    });

    testServer.on("error", () => {
      resolve(false);
    });
  });
}

// ‚úÖ CORRECTION: Fonction pour d√©marrer le serveur avec gestion d'erreurs robuste
const startServer = async (): Promise<void> => {
  try {
    logger.info("üöÄ D√©marrage du serveur ISRA Seed Trace...");

    // ‚úÖ CORRECTION: V√©rifier que le port est disponible
    logger.info(`üîç V√©rification de la disponibilit√© du port ${PORT}...`);
    const isPortAvailable = await testPortAvailability(PORT, HOST);

    if (!isPortAvailable) {
      throw new Error(`Port ${PORT} d√©j√† utilis√© sur ${HOST}`);
    }

    logger.info(`‚úÖ Port ${PORT} disponible`);

    // ‚úÖ CORRECTION: Connexion √† la base de donn√©es avec retry et timeout
    logger.info("üîó Connexion √† la base de donn√©es...");
    let dbConnected = false;
    let retries = 3;

    while (!dbConnected && retries > 0) {
      try {
        // Timeout de 10 secondes pour la connexion DB
        const dbPromise = connectDatabase();
        const timeoutPromise = new Promise((_, reject) =>
          setTimeout(() => reject(new Error("Timeout de connexion DB")), 10000)
        );

        await Promise.race([dbPromise, timeoutPromise]);

        logger.info("‚úÖ Connexion √† la base de donn√©es √©tablie");
        dbConnected = true;
      } catch (error: any) {
        retries--;
        logger.warn(`‚ùå Tentative de connexion DB √©chou√©e: ${error.message}`);
        logger.warn(`Tentatives restantes: ${retries}`);

        if (retries > 0) {
          logger.info("‚è≥ Attente avant nouvelle tentative...");
          await new Promise((resolve) => setTimeout(resolve, 2000)); // Attendre 2s
        } else {
          // En d√©veloppement, permettre de continuer sans DB pour debug
          if (isDevelopment()) {
            logger.warn("‚ö†Ô∏è  Continuation sans DB en mode d√©veloppement");
            break;
          } else {
            throw new Error(
              `Impossible de se connecter √† la base de donn√©es apr√®s 3 tentatives: ${error.message}`
            );
          }
        }
      }
    }

    // ‚úÖ CORRECTION: D√©marrer le serveur avec gestion d'erreurs d√©taill√©es
    logger.info(`üöÄ D√©marrage du serveur sur ${HOST}:${PORT}...`);

    server.listen(PORT, HOST, () => {
      logger.info("üéâ Serveur d√©marr√© avec succ√®s!");
      logger.info(`üìç URL: http://${HOST}:${PORT}`);
      logger.info(`üìù Environnement: ${config.environment}`);
      logger.info(`üîó CORS activ√© pour: ${config.client.url}`);
      logger.info(`üîê JWT configur√© avec expiration: ${config.jwt.expiresIn}`);
      logger.info(
        `üìÅ Upload max: ${Math.round(
          config.upload.maxFileSize / 1024 / 1024
        )}MB`
      );
      logger.info(`üìä Log level: ${config.logging.level}`);

      if (isDevelopment()) {
        logger.info("üõ†Ô∏è  Mode d√©veloppement activ√©");
        logger.info(`üìö API disponible sur: http://${HOST}:${PORT}/api`);
        logger.info(`‚ù§Ô∏è  Health check: http://${HOST}:${PORT}/api/health`);
        logger.info(`üå± Seed lots: http://${HOST}:${PORT}/api/seed-lots`);
        logger.info(`üë§ Auth: http://${HOST}:${PORT}/api/auth/login`);
      }

      // Afficher des informations de d√©bogage utiles
      logger.debug("üîß Configuration du serveur:", {
        port: PORT,
        host: HOST,
        environment: config.environment,
        databaseConnected: dbConnected,
        jwtConfigured: !!config.jwt.secret,
        corsOrigin: config.client.url,
      });
    });

    // ‚úÖ CORRECTION: Gestion d√©taill√©e des erreurs de serveur
    server.on("error", (error: any) => {
      logger.error("‚ùå Erreur du serveur HTTP:", error);

      if (error.code === "EADDRINUSE") {
        logger.error(`‚ùå Le port ${PORT} est d√©j√† utilis√©`);
        logger.info("üí° Solutions possibles:");
        logger.info(`   ‚Ä¢ Changez le PORT dans .env (ex: PORT=3002)`);
        logger.info(`   ‚Ä¢ Arr√™tez le processus utilisant le port ${PORT}`);
        logger.info(
          `   ‚Ä¢ Utilisez 'netstat -ano | findstr :${PORT}' pour identifier le processus`
        );
      } else if (error.code === "EACCES") {
        logger.error(`‚ùå Permission refus√©e pour le port ${PORT}`);
        logger.info(
          "üí° Essayez un port > 1024 ou lancez en tant qu'administrateur"
        );
      } else if (error.code === "ENOTFOUND") {
        logger.error(`‚ùå Host non trouv√©: ${HOST}`);
        logger.info("üí° V√©rifiez la variable HOST dans .env");
      } else {
        logger.error("‚ùå Erreur serveur inconnue:", {
          code: error.code,
          message: error.message,
          stack: isDevelopment() ? error.stack : undefined,
        });
      }

      process.exit(1);
    });

    // ‚úÖ CORRECTION: Gestion des timeouts et connexions
    server.timeout = 30000; // 30 secondes timeout
    server.keepAliveTimeout = 5000; // 5 secondes keep-alive
    server.headersTimeout = 6000; // 6 secondes headers timeout
  } catch (error: any) {
    logger.error("‚ùå Erreur fatale lors du d√©marrage du serveur:", {
      message: error.message,
      stack: isDevelopment() ? error.stack : undefined,
      code: error.code,
    });

    // ‚úÖ CORRECTION: Messages d'aide sp√©cifiques selon l'erreur
    if (error.message.includes("DATABASE_URL")) {
      logger.error("üí° Probl√®me de base de donn√©es:");
      logger.error("   ‚Ä¢ V√©rifiez que PostgreSQL est d√©marr√©");
      logger.error("   ‚Ä¢ V√©rifiez DATABASE_URL dans .env");
      logger.error("   ‚Ä¢ Testez avec: npx prisma db push");
    }

    if (error.message.includes("JWT_SECRET")) {
      logger.error("üí° Probl√®me JWT:");
      logger.error("   ‚Ä¢ V√©rifiez que JWT_SECRET est d√©fini dans .env");
      logger.error("   ‚Ä¢ JWT_SECRET doit faire au moins 32 caract√®res");
    }

    if (
      error.message.includes("Port") ||
      error.message.includes("EADDRINUSE")
    ) {
      logger.error("üí° Probl√®me de port:");
      logger.error(`   ‚Ä¢ Le port ${PORT} est peut-√™tre d√©j√† utilis√©`);
      logger.error("   ‚Ä¢ Changez PORT dans .env (ex: PORT=3002)");
      logger.error(`   ‚Ä¢ Ou arr√™tez le processus utilisant le port ${PORT}`);
    }

    if (error.message.includes("Timeout")) {
      logger.error("üí° Probl√®me de timeout:");
      logger.error("   ‚Ä¢ La base de donn√©es met trop de temps √† r√©pondre");
      logger.error("   ‚Ä¢ V√©rifiez que PostgreSQL est accessible");
      logger.error("   ‚Ä¢ V√©rifiez la configuration r√©seau");
    }

    process.exit(1);
  }
};

// ‚úÖ CORRECTION: Gestion gracieuse de l'arr√™t avec timeout
const gracefulShutdown = async (signal: string): Promise<void> => {
  logger.info(`${signal} re√ßu. Arr√™t gracieux du serveur...`);

  // Timeout pour forcer l'arr√™t si n√©cessaire
  const forceShutdownTimeout = setTimeout(() => {
    logger.error("‚ùå Arr√™t forc√© apr√®s timeout de 15 secondes");
    process.exit(1);
  }, 15000);

  try {
    // Arr√™ter d'accepter de nouvelles connexions
    server.close(async () => {
      logger.info("‚úÖ Serveur HTTP ferm√©");

      try {
        // Fermer la base de donn√©es
        await disconnectDatabase();
        logger.info("‚úÖ Connexions √† la base de donn√©es ferm√©es");
      } catch (error) {
        logger.warn("‚ö†Ô∏è  Erreur lors de la fermeture de la DB:", error);
      }

      try {
        // Fermer Socket.IO
        if (io) {
          io.close();
          logger.info("‚úÖ Socket.IO ferm√©");
        }
      } catch (error) {
        logger.warn("‚ö†Ô∏è  Erreur lors de la fermeture de Socket.IO:", error);
      }

      clearTimeout(forceShutdownTimeout);
      logger.info("üèÅ Arr√™t complet du serveur");
      process.exit(0);
    });
  } catch (error) {
    logger.error("‚ùå Erreur lors de l'arr√™t gracieux:", error);
    clearTimeout(forceShutdownTimeout);
    process.exit(1);
  }
};

// ‚úÖ CORRECTION: Gestion am√©lior√©e des erreurs non captur√©es
process.on("unhandledRejection", (reason: any, promise: Promise<any>) => {
  logger.error("UNHANDLED PROMISE REJECTION! üí•", {
    reason: reason?.message || reason,
    stack: reason?.stack,
    promise: promise.toString().substring(0, 100) + "...",
  });

  // En d√©veloppement, ne pas arr√™ter imm√©diatement pour le debug
  if (isDevelopment()) {
    logger.warn("‚ö†Ô∏è  Continuation en mode d√©veloppement malgr√© la rejection");
  } else {
    logger.error(
      "üö® Arr√™t du serveur √† cause d'une Promise rejection non g√©r√©e"
    );
    server.close(() => {
      process.exit(1);
    });
  }
});

process.on("uncaughtException", (err: Error) => {
  logger.error("UNCAUGHT EXCEPTION! üí•", {
    message: err.message,
    stack: err.stack,
    name: err.name,
  });

  logger.error(
    "üö® Arr√™t imm√©diat du serveur √† cause d'une exception non g√©r√©e"
  );
  process.exit(1);
});

// ‚úÖ CORRECTION: Gestion des signaux d'arr√™t
process.on("SIGTERM", () => gracefulShutdown("SIGTERM"));
process.on("SIGINT", () => gracefulShutdown("SIGINT"));

// Gestion sp√©cifique Windows
if (process.platform === "win32") {
  process.on("SIGBREAK", () => gracefulShutdown("SIGBREAK"));
}

// ‚úÖ CORRECTION: D√©marrer le serveur avec gestion d'erreurs finale
console.log("üåæ ISRA Seed Trace - Syst√®me de tra√ßabilit√© des semences");
console.log("======================================================");

startServer().catch((error) => {
  console.error("üí• ERREUR FATALE lors du d√©marrage:", error.message);

  if (isDevelopment()) {
    console.error("üìã Stack trace compl√®te:");
    console.error(error.stack);
  }

  console.error("\nüí° V√©rifications recommand√©es:");
  console.error("   1. PostgreSQL est-il d√©marr√© ?");
  console.error("   2. Le fichier .env existe-t-il ?");
  console.error("   3. DATABASE_URL est-elle correcte ?");
  console.error("   4. Le port 3001 est-il libre ?");
  console.error("   5. Toutes les d√©pendances sont-elles install√©es ?");
  console.error("\nüîß Commandes de diagnostic:");
  console.error("   ‚Ä¢ npm install");
  console.error("   ‚Ä¢ npx prisma db push");
  console.error("   ‚Ä¢ node diagnose.js");

  process.exit(1);
});

// ‚úÖ CORRECTION: Log de d√©marrage du processus
logger.info("üìã Processus de d√©marrage initialis√©", {
  pid: process.pid,
  nodeVersion: process.version,
  platform: process.platform,
  arch: process.arch,
  env: config.environment,
  memory: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + "MB",
});
