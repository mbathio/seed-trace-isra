import dotenv from "dotenv";
import http from "http";
import { Server as SocketIOServer } from "socket.io";
import app from "./app";
import { connectDatabase } from "./config/database";
import { logger } from "./utils/logger";

// Charger les variables d'environnement
dotenv.config();

// Configuration du serveur
const PORT = process.env.PORT || 3001;
const HOST = process.env.HOST || "localhost";
const isProduction = process.env.NODE_ENV === "production";

// Cr√©er le serveur HTTP
const server = http.createServer(app);

// Configuration Socket.IO (si n√©cessaire)
const io = new SocketIOServer(server, {
  cors: {
    origin: process.env.CLIENT_URL || "http://localhost:5173",
    credentials: true,
  },
});

// Gestionnaire Socket.IO
io.on("connection", (socket) => {
  logger.info(`Nouveau client connect√©: ${socket.id}`);

  socket.on("disconnect", () => {
    logger.info(`Client d√©connect√©: ${socket.id}`);
  });

  // Ajouter d'autres √©v√©nements Socket.IO si n√©cessaire
});

// Fonction pour d√©marrer le serveur
const startServer = async (): Promise<void> => {
  try {
    // Connexion √† la base de donn√©es
    await connectDatabase();
    logger.info("‚úÖ Connexion √† la base de donn√©es √©tablie");

    // D√©marrer le serveur
    server.listen(PORT, () => {
      logger.info(`üöÄ Serveur d√©marr√© sur http://${HOST}:${PORT}`);
      logger.info(`üìù Environnement: ${process.env.NODE_ENV || "development"}`);
      logger.info(
        `üîó CORS activ√© pour: ${process.env.CLIENT_URL || "http://localhost:5173"}`
      );
      logger.info(
        `üîê JWT configur√© avec expiration: ${process.env.JWT_ACCESS_EXPIRY}`
      );

      if (!isProduction) {
        logger.info(
          `üìö Documentation API disponible sur: http://${HOST}:${PORT}/api/docs`
        );
      }
    });
  } catch (error) {
    logger.error("‚ùå Erreur lors du d√©marrage du serveur:", error);
    process.exit(1);
  }
};

// Gestion des erreurs non captur√©es
process.on("unhandledRejection", (err: Error) => {
  logger.error("UNHANDLED REJECTION! üí• Arr√™t du serveur...", err);
  server.close(() => {
    process.exit(1);
  });
});

process.on("uncaughtException", (err: Error) => {
  logger.error("UNCAUGHT EXCEPTION! üí• Arr√™t du serveur...", err);
  server.close(() => {
    process.exit(1);
  });
});

// Gestion gracieuse de l'arr√™t
const gracefulShutdown = async (signal: string): Promise<void> => {
  logger.info(`${signal} re√ßu. Arr√™t gracieux du serveur...`);

  server.close(async () => {
    logger.info("Serveur HTTP ferm√©");

    try {
      // Fermer les connexions √† la base de donn√©es
      // await disconnectDatabase();
      logger.info("Connexions √† la base de donn√©es ferm√©es");

      // Fermer d'autres ressources si n√©cessaire
      io.close();

      logger.info("Arr√™t complet du serveur");
      process.exit(0);
    } catch (error) {
      logger.error("Erreur lors de l'arr√™t:", error);
      process.exit(1);
    }
  });

  // Force l'arr√™t apr√®s 10 secondes
  setTimeout(() => {
    logger.error("Arr√™t forc√© apr√®s timeout");
    process.exit(1);
  }, 10000);
};

// √âcouter les signaux d'arr√™t
process.on("SIGTERM", () => gracefulShutdown("SIGTERM"));
process.on("SIGINT", () => gracefulShutdown("SIGINT"));

// D√©marrer le serveur
startServer();
