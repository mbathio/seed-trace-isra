// backend/check-users.js
const { PrismaClient } = require("@prisma/client");
const bcrypt = require("bcryptjs");

const prisma = new PrismaClient();

async function checkUsers() {
  console.log("=== V√âRIFICATION DES UTILISATEURS ===\n");

  try {
    // 1. Compter les utilisateurs
    const userCount = await prisma.user.count();
    console.log(`Nombre total d'utilisateurs: ${userCount}`);

    if (userCount === 0) {
      console.log("\n‚ùå AUCUN UTILISATEUR TROUV√â!");
      console.log("Ex√©cutez d'abord: npm run seed");
      return;
    }

    // 2. Lister tous les utilisateurs
    const users = await prisma.user.findMany({
      select: {
        id: true,
        name: true,
        email: true,
        role: true,
        isActive: true,
        createdAt: true,
        password: true, // Pour v√©rifier le hash
      },
    });

    console.log("\nüìã UTILISATEURS DANS LA BASE:");
    console.log("================================");

    for (const user of users) {
      console.log(`\nID: ${user.id}`);
      console.log(`Nom: ${user.name}`);
      console.log(`Email: ${user.email}`);
      console.log(`R√¥le: ${user.role}`);
      console.log(`Actif: ${user.isActive}`);
      console.log(`Cr√©√© le: ${user.createdAt}`);
      console.log(`Hash du mot de passe: ${user.password.substring(0, 20)}...`);
    }

    // 3. Tester la connexion avec un utilisateur
    console.log("\n\nüîê TEST DE CONNEXION:");
    console.log("======================");

    const testEmail = "adiop@isra.sn";
    const testPassword = "123456";

    console.log(`\nTest avec: ${testEmail} / ${testPassword}`);

    const testUser = await prisma.user.findUnique({
      where: { email: testEmail, isActive: true },
    });

    if (!testUser) {
      console.log("‚ùå Utilisateur non trouv√© ou inactif");
      return;
    }

    console.log("‚úÖ Utilisateur trouv√©");
    console.log(`Hash stock√©: ${testUser.password}`);

    // Test du mot de passe
    const isPasswordValid = await bcrypt.compare(
      testPassword,
      testUser.password
    );
    console.log(
      `\nR√©sultat de la comparaison: ${
        isPasswordValid ? "‚úÖ VALIDE" : "‚ùå INVALIDE"
      }`
    );

    if (!isPasswordValid) {
      // Test de hachage
      console.log("\nüîß TEST DE HACHAGE:");
      const newHash = await bcrypt.hash(testPassword, 12);
      console.log(`Nouveau hash g√©n√©r√©: ${newHash}`);

      const testNewHash = await bcrypt.compare(testPassword, newHash);
      console.log(
        `Test du nouveau hash: ${testNewHash ? "‚úÖ OK" : "‚ùå ERREUR"}`
      );

      console.log("\nüí° SOLUTION:");
      console.log("Le mot de passe stock√© ne correspond pas.");
      console.log("Ex√©cutez le script fix-passwords.js pour corriger.");
    }

    // 4. V√©rifier les r√¥les
    console.log("\n\nüìä DISTRIBUTION DES R√îLES:");
    console.log("===========================");

    const roleCount = await prisma.user.groupBy({
      by: ["role"],
      _count: {
        id: true,
      },
    });

    roleCount.forEach((item) => {
      console.log(`${item.role}: ${item._count.id} utilisateur(s)`);
    });
  } catch (error) {
    console.error("\n‚ùå ERREUR:", error.message);
    console.error(error);
  } finally {
    await prisma.$disconnect();
    console.log("\n‚úÖ D√©connexion de la base de donn√©es");
  }
}

checkUsers().catch(console.error);
